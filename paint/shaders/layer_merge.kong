
#[set(everything)]
const constants: {
	opac: float;
	blending: int;
	tex1w: float;
};

#[set(everything)]
const sampler_linear: sampler;

#[set(everything)]
const tex0: tex2d;

#[set(everything)]
const tex1: tex2d;

#[set(everything)]
const texmask: tex2d;

#[set(everything)]
const texa: tex2d;

struct vert_in {
	pos: float2;
}

struct vert_out {
	pos: float4;
	tex: float2;
}

fun layer_merge_vert(input: vert_in): vert_out {
	var output: vert_out;
	output.tex = input.pos.xy * 0.5 + 0.5;
	output.tex.y = 1.0 - output.tex.y;
	output.pos = float4(input.pos.xy, 0.0, 1.0);
	return output;
}

fun hsv_to_rgb(c: float3): float3 {
	var K: float4 = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	var p: float3 = abs3(frac3(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * lerp3(K.xxx, clamp3(p - K.xxx, 0.0, 1.0), c.y);
}

fun rgb_to_hsv(c: float3): float3 {
	var K: float4 = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	var p: float4 = lerp4(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
	var q: float4 = lerp4(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));
	var d: float = q.x - min(q.w, q.y);
	var e: float = 0.0000000001;
	return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

fun layer_merge_frag(input: vert_out): float4 {
	var col0: float4 = sample_lod(tex0, sampler_linear, input.tex, 0.0);
	var cola: float4 = sample_lod(texa, sampler_linear, input.tex, 0.0);
	var str: float = col0.a * constants.opac;
	str *= sample_lod(texmask, sampler_linear, input.tex, 0.0).r;

	if (constants.blending == 101) { // Merging _nor and _pack
		var col1: float4 = sample_lod(tex1, sampler_linear, input.tex, 0.0);
		return lerp4(cola, col1, str);
	}
	if (constants.blending == 102) { // Merging _nor with normal blending
		var col1: float4 = sample_lod(tex1, sampler_linear, input.tex, 0.0);
		// Whiteout blend
		var n1: float3 = cola.rgb * float3(2.0, 2.0, 2.0) - float3(1.0, 1.0, 1.0);
		var n2: float3 = lerp3(float3(0.5, 0.5, 1.0), col1.rgb, str) * float3(2.0, 2.0, 2.0) - float3(1.0, 1.0, 1.0);
		return float4(
			normalize(float3(n1.xy + n2.xy, n1.z * n2.z)) * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5),
			max(col1.a, cola.a));
	}
	if (constants.blending == 103) { // Merging _pack with height blending
		var col1: float4 = sample_lod(tex1, sampler_linear, input.tex, 0.0);
		return float4(lerp3(cola.rgb, col1.rgb, str), cola.a + col1.a);
	}
	if (constants.blending == 104) { // Merge _pack.height into _nor
		var tex_step: float = 1.0 / constants.tex1w;
		var height0: float = sample_lod(tex1, sampler_linear, float2(input.tex.x - tex_step, input.tex.y), 0.0).a;
		var height1: float = sample_lod(tex1, sampler_linear, float2(input.tex.x + tex_step, input.tex.y), 0.0).a;
		var height2: float = sample_lod(tex1, sampler_linear, float2(input.tex.x, input.tex.y - tex_step), 0.0).a;
		var height3: float = sample_lod(tex1, sampler_linear, float2(input.tex.x, input.tex.y + tex_step), 0.0).a;
		var height_dx: float = height0 - height1;
		var height_dy: float = height2 - height3;
		// Whiteout blend
		var n1: float3 = col0.rgb * float3(2.0, 2.0, 2.0) - float3(1.0, 1.0, 1.0);
		var n2: float3 = normalize(float3(height_dx * 16.0, height_dy * 16.0, 1.0));
		return float4(
			normalize(float3(n1.xy + n2.xy, n1.z * n2.z)) * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5),
			col0.a);
	}
	if (constants.blending == 0) { // Mix
		return float4(
			lerp3(cola.rgb, col0.rgb, str), max(col0.a, cola.a));
	}
	if (constants.blending == 1) { // Darken
		return float4(
			lerp3(cola.rgb, min3(cola.rgb, col0.rgb), str), max(col0.a, cola.a));
	}
	if (constants.blending == 2) { // Multiply
		return float4(
			lerp3(cola.rgb, cola.rgb * col0.rgb, str), max(col0.a, cola.a));
	}
	if (constants.blending == 3) { // Burn
		return float4(
			lerp3(
				cola.rgb,
				float3(1.0, 1.0, 1.0) - (float3(1.0, 1.0, 1.0) - cola.rgb) / col0.rgb,
				str),
			max(col0.a, cola.a));
	}
	if (constants.blending == 4) { // Lighten
		return float4(
			max3(cola.rgb, col0.rgb * str),
			max(col0.a, cola.a));
	}
	if (constants.blending == 5) { // Screen
		return float4(
			(float3(1.0, 1.0, 1.0) - (float3(1.0 - str, 1.0 - str, 1.0 - str) +
				str * (float3(1.0, 1.0, 1.0) - col0.rgb)) * (float3(1.0, 1.0, 1.0) - cola.rgb)),
			max(col0.a, cola.a));
	}
	if (constants.blending == 6) { // Dodge
		return float4(
			lerp3(cola.rgb, cola.rgb / (float3(1.0, 1.0, 1.0) - col0.rgb), str),
			max(col0.a, cola.a));
	}
	if (constants.blending == 7) { // Add
		return float4(
			lerp3(cola.rgb, cola.rgb + col0.rgb, str),
			max(col0.a, cola.a));
	}

	////

	/* TODO: SPIRV

	if (constants.blending == 8) { // Overlay
		var rr: float;
		if (cola.r < 0.5) {
			rr = 2.0 * cola.r * col0.r;
		}
		else {
			rr = 1.0 - 2.0 * (1.0 - cola.r) * (1.0 - col0.r);
		}
		var gg: float;
		if (cola.r < 0.5) {
			gg = 2.0 * cola.g * col0.g;
		}
		else {
			gg = 1.0 - 2.0 * (1.0 - cola.g) * (1.0 - col0.g);
		}
		var bb: float;
		if (cola.r < 0.5) {
			bb = 2.0 * cola.b * col0.b;
		}
		else {
			bb = 1.0 - 2.0 * (1.0 - cola.b) * (1.0 - col0.b);
		}
		return float4(
			lerp3(cola.rgb, float3(rr, gg, bb), str),
			max(col0.a, cola.a));
	}
	if (constants.blending == 9) { // Soft Light
		return float4(
			((1.0 - str) * cola.rgb +
				str * ((float3(1.0, 1.0, 1.0) - cola.rgb) * col0.rgb * cola.rgb +
				cola.rgb * (float3(1.0, 1.0, 1.0) - (float3(1.0, 1.0, 1.0) - col0.rgb) * (float3(1.0, 1.0, 1.0) - cola.rgb)))),
			max(col0.a, cola.a));
	}
	if (constants.blending == 10) { // Linear Light
		return float4(
			(cola.rgb + str * (float3(2.0, 2.0, 2.0) * (col0.rgb - float3(0.5, 0.5, 0.5)))),
			max(col0.a, cola.a));
	}
	if (constants.blending == 11) {
		return float4(
			lerp3(cola.rgb, abs3(cola.rgb - col0.rgb), str),
			max(col0.a, cola.a));
	}
	if (constants.blending == 12) { // Subtract
		return float4(
			lerp3(cola.rgb, cola.rgb - col0.rgb, str),
			max(col0.a, cola.a));
	}
	if (constants.blending == 13) { // Divide
		return float4(
			float3(1.0 - str, 1.0 - str, 1.0 - str) * cola.rgb + float3(str, str, str) * cola.rgb / col0.rgb,
			max(col0.a, cola.a));
	}
	if (constants.blending == 14) { // Hue
		return float4(
			lerp3(
				cola.rgb,
				hsv_to_rgb(
					float3(rgb_to_hsv(col0.rgb).r,
					rgb_to_hsv(cola.rgb).g,
					rgb_to_hsv(cola.rgb).b)),
				str),
			max(col0.a, cola.a));
	}
	if (constants.blending == 15) { // Saturation
		return float4(
			lerp3(
				cola.rgb,
				hsv_to_rgb(
					float3(rgb_to_hsv(cola.rgb).r,
					rgb_to_hsv(col0.rgb).g,
					rgb_to_hsv(cola.rgb).b)),
				str),
			max(col0.a, cola.a));
	}
	if (constants.blending == 16) { // Color
		return float4(
			lerp3(
				cola.rgb,
				hsv_to_rgb(
					float3(rgb_to_hsv(col0.rgb).r,
					rgb_to_hsv(col0.rgb).g,
					rgb_to_hsv(cola.rgb).b)),
				str),
			max(col0.a, cola.a));
	}
	if (constants.blending == 17) { // Value
		return float4(
			lerp3(
				cola.rgb,
				hsv_to_rgb(
					float3(rgb_to_hsv(cola.rgb).r,
					rgb_to_hsv(cola.rgb).g,
					rgb_to_hsv(col0.rgb).b)),
				str),
			max(col0.a, cola.a));
	}

	*/

	////

	return float4(1.0, 1.0, 1.0, 1.0);
}

#[pipe]
struct pipe {
	vertex = layer_merge_vert;
	fragment = layer_merge_frag;
}
